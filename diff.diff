diff --git a/__tests__/products.test.ts b/__tests__/products.test.ts
index 9aa8042..c1f59a8 100644
--- a/__tests__/products.test.ts
+++ b/__tests__/products.test.ts
@@ -32,6 +32,11 @@ describe('Product API', () => {
       .send({ username: 'buyer1', password: 'password' })
     buyerToken = buyerLoginResponse.headers['set-cookie'][0]
 
+    // Create a second seller used in some tests (ensure it exists regardless of test order)
+    await request(app)
+      .post('/api/v1/users')
+      .send({ username: 'seller2', password: 'password', role: 'seller' })
+
     // Add deposit for buyer
     const res = await request(app)
       .put(`/api/v1/users/${buyerResponse.body.user.id}/deposit`)
@@ -117,10 +122,6 @@ describe('Product API', () => {
     })
 
     it('should not allow non-owners to update a product', async () => {
-      // Create another seller
-      await request(app)
-        .post('/api/v1/users')
-        .send({ username: 'seller2', password: 'password', role: 'seller' })
       const seller2LoginResponse = await request(app)
         .post('/api/v1/users/auth')
         .send({ username: 'seller2', password: 'password' })
diff --git a/controllers/products/productsController.ts b/controllers/products/productsController.ts
index c1f9936..5e3cc8c 100644
--- a/controllers/products/productsController.ts
+++ b/controllers/products/productsController.ts
@@ -24,7 +24,8 @@ export const handleGetAllProducts = async (req: Request, res: Response) => {
 export const handleGetProduct = async (req: Request, res: Response) => {
   try {
     const { id } = req.params
-    const product = await findProduct(id)
+    const productId = parseInt(id)
+    const product = await findProduct(productId)
 
     if (!product) {
       return handleError(res, 404, 'Product not found')
@@ -126,7 +127,8 @@ export const handleDeleteProduct = async (req: Request, res: Response) => {
       return handleError(res, 401, 'User is not a seller')
     }
 
-    const product = await findProduct(id)
+    const productId = parseInt(id)
+    const product = await findProduct(productId)
     if (!product) {
       return handleError(res, 404, 'Product not found')
     }
@@ -156,8 +158,10 @@ export const handleBuy = async (req: Request, res: Response) => {
       return handleError(res, 401, 'User is not a buyer')
     }
 
+    const productId = parseInt(id)
+
     const [product, user] = await Promise.all([
-      findProduct(id),
+      findProduct(productId),
       findUser(userId),
     ])
 
diff --git a/controllers/users/usersController.ts b/controllers/users/usersController.ts
index 002df6d..0d5ab80 100644
--- a/controllers/users/usersController.ts
+++ b/controllers/users/usersController.ts
@@ -80,6 +80,11 @@ export const handleCreateUser = async (req: Request, res: Response) => {
 export const handleUpdateUser = async (req: Request, res: Response) => {
   try {
     const { id } = req.params
+    const userIdParam = parseInt(id)
+
+    if (!req.userId || req.userId !== userIdParam) {
+      return handleError(res, 401, 'Unauthorized')
+    }
     const { username, password, role } = req.body
 
     const userExists = await checkUserExists(parseInt(id))
@@ -116,6 +121,11 @@ export const handleUpdateUser = async (req: Request, res: Response) => {
 export const handleDeleteUser = async (req: Request, res: Response) => {
   try {
     const { id } = req.params
+    const userIdParam = parseInt(id)
+
+    if (!req.userId || req.userId !== userIdParam) {
+      return handleError(res, 401, 'Unauthorized')
+    }
 
     const userExists = await checkUserExists(parseInt(id))
     if (!userExists) {
@@ -123,7 +133,7 @@ export const handleDeleteUser = async (req: Request, res: Response) => {
     }
 
     await db.user.delete({ where: { id: parseInt(id) } })
-    res.clearCookie('token')
+    res.clearCookie('jwt')
 
     return res.status(200).json({ message: 'User deleted successfully' })
   } catch (e) {
@@ -135,6 +145,11 @@ export const handleDeposit = async (req: Request, res: Response) => {
   try {
     const { id } = req.params
     const { amount } = req.body
+    const userIdParam = parseInt(id)
+
+    if (!req.userId || req.userId !== userIdParam) {
+      return handleError(res, 401, 'Unauthorized')
+    }
 
     const user = await findUser(parseInt(id))
     if (!user) {
@@ -163,6 +178,11 @@ export const handleDeposit = async (req: Request, res: Response) => {
 export const handleReset = async (req: Request, res: Response) => {
   try {
     const { id } = req.params
+    const userIdParam = parseInt(id)
+
+    if (!req.userId || req.userId !== userIdParam) {
+      return handleError(res, 401, 'Unauthorized')
+    }
 
     const user = await findUser(parseInt(id))
     if (!user) {
diff --git a/middlewares/protect.ts b/middlewares/protect.ts
index b078c19..ed845e9 100644
--- a/middlewares/protect.ts
+++ b/middlewares/protect.ts
@@ -12,6 +12,11 @@ declare global {
 export const protect = (req: Request, res: Response, next: NextFunction) => {
 	const { JWT_SECRET } = process.env
 
+	if (!JWT_SECRET) {
+		console.error('JWT_SECRET is not defined')
+		return res.status(500).json({ message: 'Server misconfiguration' })
+	}
+
 	try {
 		const token = req.cookies.jwt
 
diff --git a/utils/auth.ts b/utils/auth.ts
index fa53f88..1864aab 100644
--- a/utils/auth.ts
+++ b/utils/auth.ts
@@ -5,7 +5,7 @@ import bcrypt from "bcrypt"
 export const signToken = (id: number, res: Response) => {
 	const { NODE_ENV, JWT_SECRET } = process.env
 
-	if (!process.env.JWT_SECRET) {
+	if (!JWT_SECRET) {
 		throw new Error("JWT secret is not defined.")
 	}
 
diff --git a/validation/userValidation.ts b/validation/userValidation.ts
index 4d5311e..1117afc 100644
--- a/validation/userValidation.ts
+++ b/validation/userValidation.ts
@@ -9,6 +9,12 @@ export const authUserValidation = [
     .isLength({ min: 4, max: 20 })
     .withMessage('Username must be between 4 and 20 characters')
     .toLowerCase(),
+
+  body('password')
+    .exists()
+    .withMessage('Password is required')
+    .isLength({ min: 6 })
+    .withMessage('Password must be at least 6 characters long'),
 ]
 
 export const createUserValidation = [
